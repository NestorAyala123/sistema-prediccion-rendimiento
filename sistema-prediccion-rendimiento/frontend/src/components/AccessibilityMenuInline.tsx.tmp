import { Menu } from '@headlessui/react'
import { ArrowPathIcon } from '@heroicons/react/24/outline'
import React, { useContext } from 'react'
import { useTranslation } from 'react-i18next'
import { useAccessibility } from '../hooks/useAccessibility'
import { TranslationKey } from '../i18n/translations'

const AccessibilityMenuInline: React.FC = () => {
  const { t } = useTranslation()
  const { settings, updateSetting, resetSettings } = useAccessibility()

  return (
    <Menu as="div" className="relative inline-block text-left">
      <Menu.Items className="absolute right-0 z-50 mt-2 w-full sm:w-[320px] bg-white rounded-md shadow-lg dark:bg-gray-800 focus:outline-none transform transition duration-200 ease-in-out">
        <div className="divide-y divide-gray-100 dark:divide-gray-700">
          <div className="px-4 py-5 text-gray-700 dark:text-gray-300">
            <h3 className="text-lg font-medium mb-1">{t('accessibility.menuTitle' as TranslationKey)}</h3>
            <p className="text-sm text-gray-500 dark:text-gray-400">{t('accessibility.menuDesc' as TranslationKey)}</p>
          </div>

          <div className="divide-y divide-gray-100 dark:divide-gray-700">
            <div className="p-4">
              <div className="mb-6">
                <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-4">
                  {t('accessibility.categories.visual' as TranslationKey)}
                </h4>
                <div className="space-y-4">
                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <label className="text-sm text-gray-700 dark:text-gray-300">
                        {t('accessibility.features.textSize' as TranslationKey)}
                      </label>
                      <span className="text-sm text-gray-500">{settings.textSize ?? 1}</span>
                    </div>
                    <input
                      type="range"
                      min={0.8}
                      max={2}
                      step={0.1}
                      value={settings.textSize ?? 1}
                      onChange={(e) => updateSetting('textSize', parseFloat(e.target.value))}
                      className="w-full"
                      aria-label={t('accessibility.features.textSize' as TranslationKey)}
                      aria-valuemin={0.8}
                      aria-valuemax={5}
                      aria-valuenow={settings.textSize ?? 1}
                      aria-valuetext={`${t('accessibility.features.textSize' as TranslationKey)}: ${settings.textSize ?? 1}`}
                    />
                    <div className="absolute -top-6 left-0 w-full flex justify-between text-xs text-gray-500">
                      <span>A</span>
                      <span>A</span>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm text-gray-700 dark:text-gray-300 mb-2">
                      {t('accessibility.features.fontType' as TranslationKey)}
                    </label>
                    <select
                      value={settings.fontType ?? 'Arial'}
                      onChange={(e) => updateSetting('fontType', e.target.value)}
                      className="w-full h-[44px] px-4 text-base bg-white border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:text-white hover:border-blue-500 transition-colors cursor-pointer"
                      aria-label={t('accessibility.features.fontType' as TranslationKey)}
                    >
                      <option value="Verdana">Verdana</option>
                      <option value="Arial">Arial</option>
                      <option value="OpenDyslexic">OpenDyslexic</option>
                      <option value="TimesNewRoman">Times New Roman</option>
                    </select>
                  </div>

                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-700 dark:text-gray-300">{t('accessibility.features.visualAlerts' as TranslationKey)}</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.visualAlerts ?? false}
                        onChange={(e) => updateSetting('visualAlerts', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 rounded-full peer dark:bg-gray-700 peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div>
                    <div className="flex items-center justify-between mb-2">
                      <label className="text-sm text-gray-700 dark:text-gray-300">
                        {t('accessibility.features.textSpacing' as TranslationKey)}
                      </label>
                      <span className="text-sm text-gray-500">{settings.textSpacing ?? 1}</span>
                    </div>
                    <input
                      type="range"
                      min={1}
                      max={2}
                      step={0.1}
                      value={settings.textSpacing ?? 1}
                      onChange={(e) => updateSetting('textSpacing', parseFloat(e.target.value))}
                      className="w-full"
                      aria-label={t('accessibility.features.textSpacing' as TranslationKey)}
                      aria-valuemin={1}
                      aria-valuemax={5}
                      aria-valuenow={settings.textSpacing ?? 1}
                      aria-valuetext={`${t('accessibility.features.textSpacing' as TranslationKey)}: ${settings.textSpacing ?? 1}`}
                    />
                  </div>
                </div>
              </div>

              <div className="mb-6">
                <h4 className="text-sm font-medium text-gray-900 dark:text-gray-100 mb-4">
                  {t('accessibility.categories.motor' as TranslationKey)}
                </h4>
                <div className="space-y-4">
                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-700 dark:text-gray-300">{t('accessibility.features.keyboardNav' as TranslationKey)}</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.keyboardNav ?? false}
                        onChange={(e) => updateSetting('keyboardNav', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 rounded-full peer dark:bg-gray-700 peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-700 dark:text-gray-300">{t('accessibility.features.largeButtons' as TranslationKey)}</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.largeButtons ?? false}
                        onChange={(e) => updateSetting('largeButtons', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 rounded-full peer dark:bg-gray-700 peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-700 dark:text-gray-300">{t('accessibility.features.voiceControl' as TranslationKey)}</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.voiceControl ?? false}
                        onChange={(e) => updateSetting('voiceControl', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 rounded-full peer dark:bg-gray-700 peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>

                  <div className="flex items-center justify-between">
                    <span className="text-sm text-gray-700 dark:text-gray-300">{t('accessibility.features.blockAutoScroll' as TranslationKey)}</span>
                    <label className="relative inline-flex items-center cursor-pointer">
                      <input
                        type="checkbox"
                        checked={settings.blockAutoScroll ?? false}
                        onChange={(e) => updateSetting('blockAutoScroll', e.target.checked)}
                        className="sr-only peer"
                      />
                      <div className="w-11 h-6 bg-gray-200 rounded-full peer dark:bg-gray-700 peer-focus:ring-4 peer-focus:ring-blue-300 dark:peer-focus:ring-blue-800 peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-0.5 after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all dark:border-gray-600 peer-checked:bg-blue-600"></div>
                    </label>
                  </div>
                </div>
              </div>
            </div>

            <div className="p-4 flex justify-end space-x-2">
              <button
                type="button"
                onClick={resetSettings}
                className="px-4 py-2 bg-white border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 flex items-center dark:bg-gray-800 dark:border-gray-600 dark:text-white dark:hover:bg-gray-700"
              >
                <ArrowPathIcon className="h-4 w-4 mr-1" />
                {t('accessibility.actions.reset' as TranslationKey)}
              </button>
              <Menu.Button as="button" className="px-4 py-2 bg-blue-600 text-white text-sm font-medium rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500">
                {t('accessibility.actions.close' as TranslationKey)}
              </Menu.Button>
            </div>
          </div>
        </div>
      </Menu.Items>
    </Menu>
  )
}

export default AccessibilityMenuInline